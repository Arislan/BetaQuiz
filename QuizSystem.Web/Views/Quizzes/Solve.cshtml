@model QuizSolveModel
<h2>Solving <strong>"@Model.Title"</strong></h2>
<hr />
<div id="quiz-solve-container">
    <form id="quiz-solve-form" method="post" action="/Quizzes/Solve">
        @Html.AntiForgeryToken()
        <input type="hidden" name="quizId" value="@Model.Id" />
        @for (int i = 0; i < Model.Questions.Count; i++)
        {
            <div>
                <h4>@(i + 1)</h4>
                <p>@Model.Questions[i].Content</p>
                <ul>
                    @foreach (var answer in Model.Questions[i].Answers)
                        {
                        <li>
                            <input type="radio" name="q-@Model.Questions[i].Id" value="@answer.Id" />
                            <span>@answer.Content</span>
                        </li>
                        }
                </ul>
            </div>
        }
        <hr />
        <input type="submit" class="accept-btn" value="Submit" />
    </form>
</div>
@section Scripts {
    <script>
        var form = document.getElementById('quiz-solve-form');
        eventUtils.setEvent(form, 'submit', function (evt) {
            var elements = this.elements;

            var index = 0;
            var groupIndex;
            var isSelected;
            var allAnswered = true;

            while (elements[index]) {
                if (elements[index].type == 'radio') {
                    groupIndex = index;
                    isSelected = false;

                    while (elements[groupIndex].type == 'radio'
                        && elements[groupIndex].name == elements[index].name) {

                        if (elements[groupIndex].checked) {
                            isSelected = true;
                        }

                        groupIndex++;
                    }

                    if (!isSelected) {
                        allAnswered = false;
                        elements[groupIndex - 1].parentElement.parentElement.parentElement.className = 'unanswered';
                    }

                    index = groupIndex;
                    continue;
                }

                index++;
            }
            
            if (!allAnswered) {
                htmlUtils.overlayMessage({ isError: true, message: 'There is still unanswered questions.' });
                eventUtils.preventDefault(evt);
            }
        });
        eventUtils.setEvent(form, 'click', function (evt) {
            var el = evt.target;

            if (el.tagName != 'LI') {
                el = el.parentElement;
            }

            if (el.tagName == 'LI') {

                if (el.className == 'selected') {
                    eventUtils.stopPropagation(evt);
                    return;
                }

                var oldSelect = htmlUtils.findChild(el.parentElement, { className: 'selected' });
                if (oldSelect) { oldSelect.className = '' }

                el.className = 'selected';
                if (el.parentElement.parentElement.className) {
                    el.parentElement.parentElement.className = ' ';
                }

                el = el.firstChild;
                while (el && el.type != 'radio') {
                    el = el.nextSibling;
                }

                if (el) { el.checked = true; }

            }
        });
    </script>
}
